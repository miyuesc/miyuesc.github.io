<!DOCTYPE html>
<!-- saved from url=(0080)https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc715f6fb9a049c15ea4e0 -->
<html lang="zh-CN">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no,viewport-fit=cover">
  <meta name="google-site-verification" content="cCHsgG9ktuCTgWgYfqCJql8AeR4gAne4DTZqztPoirE">
  <meta name="apple-itunes-app" content="app-id=987739104">
  <meta name="baidu-site-verification" content="qiK2a1kcFc">
  <meta name="360-site-verification" content="4c3c7d57d59f0e1a308462fbc7fd7e51">
  <meta name="sogou_site_verification" content="c49WUDZczQ">
  <style>
    body {
      font-size: 16px;
      line-height: 2;
    }

    a,
    button,
    input {
      margin: 1rem 1.5rem;
    }

    img {
      width: 0;
      height: 0;
    }

    #juejin {
      overflow-x: hidden;
    }
  </style>
  <title data-vue-meta="true">前端面试之道 - yck - 掘金小册</title>
  <link rel="apple-touch-icon" sizes="180x180" href="https://b-gold-cdn.xitu.io/favicons/v2/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon-16x16.png">
  <link rel="manifest" href="https://b-gold-cdn.xitu.io/favicons/v2/manifest.json">
  <link rel="mask-icon" href="https://b-gold-cdn.xitu.io/favicons/v2/safari-pinned-tab.svg" color="#5bbad5">
  <link rel="shortcut icon" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon.ico">
  <meta name="msapplication-config" content="https://b-gold-cdn.xitu.io/favicons/v2/browserconfig.xml">
  <meta name="theme-color" content="#ffffff">
  <link rel="search" title="掘金" href="https://b-gold-cdn.xitu.io/conf/search.xml"
    type="application/opensearchdescription+xml">
  <link rel="stylesheet" href="./2-JS 基础知识点及常考面试题（一）_files/ionicons.min.css">
  <link rel="stylesheet" href="./2-JS 基础知识点及常考面试题（一）_files/iconfont.css">
  <link href="./2-JS 基础知识点及常考面试题（一）_files/0.20e96f0e16539d696fbd.css" rel="stylesheet">
  <script async="" src="./2-JS 基础知识点及常考面试题（一）_files/hm.js.下载"></script>
  <script async="" src="./2-JS 基础知识点及常考面试题（一）_files/analytics.js.下载"></script>
  <script type="text/javascript" async="" src="./2-JS 基础知识点及常考面试题（一）_files/vds.js.下载"></script>
  <script charset="utf-8" src="./2-JS 基础知识点及常考面试题（一）_files/13.46a6fc9d409a46c2798c.js.下载"></script>
  <meta data-vmid="keywords" name="keywords"
    content="掘金,稀土,Vue.js,微信小程序,Kotlin,RxJava,React Native,Wireshark,敏捷开发,Bootstrap,OKHttp,正则表达式,WebGL,Webpack,Docker,MVVM"
    data-vue-meta="true">
  <meta data-vmid="description" name="description"
    content="掘金是一个帮助开发者成长的社区，是给开发者用的 Hacker News，给设计师用的 Designer News，和给产品经理用的 Medium。掘金的技术文章由稀土上聚集的技术大牛和极客共同编辑为你筛选出最优质的干货，其中包括：Android、iOS、前端、后端等方面的内容。用户每天都可以在这里找到技术世界的头条内容。与此同时，掘金内还有沸点、掘金翻译计划、线下活动、专栏文章等内容。即使你是 GitHub、StackOverflow、开源中国的用户，我们相信你也可以在这里有所收获。"
    data-vue-meta="true">
</head>

<body>
  <div id="juejin" data-v-514f306c="">
    <div class="global-component-box" data-v-514f306c="">
      <!---->
      <div data-v-71cabb60="" data-v-514f306c="" class="alert-list alert-list"></div>
      <!---->
      <!---->
      <!---->
      <div class="emoji-barrage" data-v-e5f49d52="" data-v-514f306c="">
        <!---->
      </div>
      <div class="book-new-user-award-popup" style="display:none;" data-v-71b0e7b2="" data-v-514f306c="">
        <div class="content-box" style="display:;" data-v-71b0e7b2="">
          <div class="close ion-close-round" data-v-71b0e7b2=""></div>
          <div class="header" data-v-71b0e7b2="">
            <div class="icon" data-v-71b0e7b2=""><img src="./2-JS 基础知识点及常考面试题（一）_files/icon.a87e5ae.svg"
                data-v-71b0e7b2=""></div>
            <div class="txt" data-v-71b0e7b2="">新人专享好礼</div>
          </div>
          <div class="desc" data-v-71b0e7b2="">凡未购买过小册的用户，均可领取三张 5 折新人专享券，购买小册时自动使用专享券，最高可节省 45 元。</div>
          <div class="tickets" data-v-71b0e7b2="">
            <div class="ticket" data-v-71b0e7b2="">
              <div class="ticket__inner" data-v-71b0e7b2="">
                <div class="enjoy" data-v-71b0e7b2=""><span class="new-title" data-v-71b0e7b2="">小册新人 5 折券</span></div>
                <div class="sale" data-v-71b0e7b2="">最高可省 15 元</div>
              </div>
            </div>
            <div class="ticket" data-v-71b0e7b2="">
              <div class="ticket__inner" data-v-71b0e7b2="">
                <div class="enjoy" data-v-71b0e7b2=""><span class="new-title" data-v-71b0e7b2="">小册新人 5 折券</span></div>
                <div class="sale" data-v-71b0e7b2="">最高可省 15 元</div>
              </div>
            </div>
            <div class="ticket" data-v-71b0e7b2="">
              <div class="ticket__inner" data-v-71b0e7b2="">
                <div class="enjoy" data-v-71b0e7b2=""><span class="new-title" data-v-71b0e7b2="">小册新人 5 折券</span></div>
                <div class="sale" data-v-71b0e7b2="">最高可省 15 元</div>
              </div>
            </div>
          </div>
          <div class="remark" data-v-71b0e7b2="">注：专享券的使用期限在领券的七天内。</div>
          <div class="submit-btn" data-v-71b0e7b2="">一键领取</div>
        </div>
        <div class="model success" style="display:none;" data-v-71b0e7b2="">
          <div class="heading" data-v-71b0e7b2="">领取成功</div>
          <div class="content-text" data-v-71b0e7b2="">购买小册时自动使用专享券</div>
          <div class="btn-success-footer" data-v-71b0e7b2="">
            <div class="btn-ok" data-v-71b0e7b2="">知道了</div>
            <div class="btn-ok btn-link" data-v-71b0e7b2="">前往小册首页</div>
          </div>
        </div>
        <div class="model fail" style="display:none;" data-v-71b0e7b2="">
          <div class="heading" data-v-71b0e7b2="">领取失败</div>
          <div class="content-text" data-v-71b0e7b2="">本活动仅适用于小册新用户</div>
          <div class="btn-ok" data-v-71b0e7b2="">知道了</div>
        </div>
      </div>
      <!---->
    </div>
    <!---->
    <div data-v-097468bb="" data-v-514f306c="" class="book-read-view">
      <section data-v-097468bb="" class="book-section">
        <div data-v-097468bb="" class="book-summary">
          <div data-v-097468bb="" class="book-summary-masker"></div>
          <div data-v-097468bb="" class="book-summary-inner">
            <div data-v-097468bb="" class="book-summary__header"><a data-v-097468bb="" href="https://juejin.im/books"
                target="" rel="" class="logo"><img data-v-097468bb=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/logo.a7995ad.svg"></a>
              <div data-v-097468bb="" class="label">小册</div>
              <!---->
            </div>
            <!---->
            <div data-v-d0eb2184="" data-v-097468bb="" class="book-directory book-directory bought"><a
                data-v-d0eb2184="" class="section section-link read">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">1</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">小册食用指南</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section route-active section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">2</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">JS 基础知识点及常考面试题（一）</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">3</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">JS 基础知识点及常考面试题（二）</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">4</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">ES6 知识点及常考面试题</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">5</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">JS 异步编程及常考面试题</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">6</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">手写 Promise</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">7</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">Event Loop</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">8</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">JS 进阶知识点及常考面试题</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">9</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">JS 思考题</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">10</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">DevTools Tips</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">11</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">浏览器基础知识点及常考面试题</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">12</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">浏览器缓存机制</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">13</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">浏览器渲染原理</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">14</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">安全防范知识点</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">15</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">从 V8 中看 JS 性能优化</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">16</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">性能优化琐碎事</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">17</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">Webpack 性能优化</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">18</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">实现小型打包工具</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">19</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">React 和 Vue 两大框架之间的相爱相杀</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">20</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">Vue 常考基础知识点</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">21</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">Vue 常考进阶知识点</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">22</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">React 常考基础知识点</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">23</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">React 常考进阶知识点</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">24</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">监控</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">25</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">UDP</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">26</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">TCP</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">27</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">HTTP 及 TLS</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">28</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">HTTP/2 及 HTTP/3</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">29</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">输入 URL 到页面渲染的整个流程</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">30</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">设计模式</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">31</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">常见数据结构</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">32</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">常考算法题解析</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">33</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">CSS 常考面试题资料</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">34</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">如何写好一封简历</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">35</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">面试常用技巧</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a><a data-v-d0eb2184="" class="section section-link">
                <div data-v-d0eb2184="" class="step">
                  <div data-v-d0eb2184="" class="step-btn">36</div>
                </div>
                <div data-v-d0eb2184="" class="center">
                  <div data-v-d0eb2184="" class="title">前方的路，让我们结伴同行</div>
                  <!---->
                  <!---->
                </div>
                <!---->
              </a></div>
            <div data-v-097468bb="" class="book-summary__footer">
              <div data-v-097468bb="" class="qr-icon"><img data-v-097468bb=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/qr-icon.881015a.svg"></div>
              <div data-v-097468bb="" class="qr-tips"><span data-v-097468bb="" class="ion-close"></span>
                <div data-v-097468bb="" class="title"><span data-v-097468bb="">关注公众号</span><span
                    data-v-097468bb="">领取优惠码</span></div>
                <div data-v-097468bb="" class="qr-img"><img data-v-097468bb=""
                    src="./2-JS 基础知识点及常考面试题（一）_files/wx-qr.13d8b4d.png"></div>
              </div>
            </div>
          </div>
        </div>
        <div data-v-097468bb="" class="book-content">
          <div data-v-097468bb="" class="book-content-inner">
            <div data-v-097468bb="" class="book-content__header">
              <div data-v-097468bb="" class="switch"><img data-v-097468bb=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/icon.3e69d5a.svg"></div>
              <div data-v-097468bb="" class="menu"><img data-v-097468bb=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/menu.74b9add.svg"></div>
              <div data-v-097468bb="" class="title"><a data-v-097468bb=""
                  href="https://juejin.im/book/5bdc715fe51d454e755f75ef" target="" rel="">前端面试之道</a></div>
              <div data-v-629272fe="" data-v-097468bb="" class="user-auth user-auth">
                <div data-v-629272fe="" class="nav-item menu">
                  <div data-v-3b1ba6d2="" data-v-afcc6e34="" data-v-629272fe=""
                    data-src="https://b-gold-cdn.xitu.io/v3/static/img/default-avatar.e30559a.svg"
                    class="lazy avatar avatar loaded"
                    style="background-image: url(&quot;https://b-gold-cdn.xitu.io/v3/static/img/default-avatar.e30559a.svg&quot;);">
                  </div>
                  <div data-v-629272fe="" class="nav-menu user-dropdown-list" style="display: none;">
                    <ul data-v-629272fe="" class="nav-menu-item-group">
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""><i data-v-629272fe=""
                            class="fengwei fw-write"></i><span data-v-629272fe="">写文章</span></a></li>
                      <!---->
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""><i data-v-629272fe=""
                            class="fengwei fw-draft"></i><span data-v-629272fe="">草稿</span></a></li>
                    </ul>
                    <ul data-v-629272fe="" class="nav-menu-item-group">
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/user/5c2c54ca6fb9a049cb18da5a"><i data-v-629272fe=""
                            class="fengwei fw-person"></i><span data-v-629272fe="">我的主页</span></a></li>
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/user/5c2c54ca6fb9a049cb18da5a/likes"><i data-v-629272fe=""
                            class="fengwei fw-like"></i><span data-v-629272fe="">我喜欢的</span></a></li>
                      <!---->
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/user/5c2c54ca6fb9a049cb18da5a/collections"><i data-v-629272fe=""
                            class="fengwei fw-collection"></i><span data-v-629272fe="">我的收藏集</span></a></li>
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/user/5c2c54ca6fb9a049cb18da5a/books?type=bought"><i data-v-629272fe=""
                            class="fengwei fw-bought"></i><span data-v-629272fe="">已购</span></a></li>
                      <!---->
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/subscribe"><i data-v-629272fe="" class="fengwei fw-tag"></i><span
                            data-v-629272fe="">标签管理</span></a></li>
                    </ul>
                    <ul data-v-629272fe="" class="nav-menu-item-group">
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                          href="https://juejin.im/user/settings"><i data-v-629272fe=""
                            class="fengwei fw-setting"></i><span data-v-629272fe="">设置</span></a></li>
                      <li data-v-629272fe="" class="nav-menu-item more"><a data-v-629272fe=""><i data-v-629272fe=""
                            class="fengwei fw-info"></i><span data-v-629272fe="">关于</span><i data-v-629272fe=""
                            class="ion-chevron-right more-icon"></i></a>
                        <div data-v-629272fe="" class="nav-menu more-dropdown-list">
                          <ul data-v-629272fe="" class="nav-menu-item-group">
                            <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                                href="https://juejin.im/app" target="_blank">下载应用</a></li>
                            <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                                href="https://juejin.im/about" target="_blank">关于</a></li>
                            <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                                href="https://xitu.io/jobs" target="_blank">加入我们</a></li>
                            <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                                href="https://github.com/xitu/gold-miner" rel="nofollow noopener noreferrer"
                                target="_blank">翻译计划</a></li>
                            <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""
                                href="https://bd.juejin.im/?utm_campaign=bd&amp;utm_source=web&amp;utm_medium=nav"
                                target="_blank">合作伙伴</a></li>
                          </ul>
                        </div>
                      </li>
                    </ul>
                    <ul data-v-629272fe="" class="nav-menu-item-group">
                      <li data-v-629272fe="" class="nav-menu-item"><a data-v-629272fe=""><i data-v-629272fe=""
                            class="fengwei fw-logout"></i><span data-v-629272fe="">登出</span></a></li>
                    </ul>
                  </div>
                </div>
                <!---->
              </div>
              <!---->
            </div>
            <div data-v-097468bb="" class="book-body transition--next">
              <div data-v-5602b343="" data-v-097468bb="" class="section-view book-section-content">
                <div data-v-05bbf43a="" data-v-5602b343="" class="section-content">
                  <div data-v-05bbf43a="" class="section-page book-section-view">
                    <div data-v-05bbf43a="" class="entry-content article-content">
                      <h1 class="heading" data-id="heading-0">JS 基础知识点及常考面试题（一）</h1>
                      <p>JS 对于每位前端开发都是必备技能，在小册中我们也会有多个章节去讲述这部分的知识。首先我们先来熟悉下 JS 的一些常考和容易混乱的基础知识点。</p>
                      <h2 class="heading" data-id="heading-1">原始（Primitive）类型</h2>
                      <blockquote class="warning">
                        <p>涉及面试题：原始类型有哪几种？null 是对象嘛？
                        </p>
                      </blockquote>
                      <p>在 JS 中，存在着 6 种原始值，分别是：</p>
                      <ul>
                        <li><code>boolean</code></li>
                        <li><code>null</code></li>
                        <li><code>undefined</code></li>
                        <li><code>number</code></li>
                        <li><code>string</code></li>
                        <li><code>symbol</code></li>
                      </ul>
                      <p>首先原始类型存储的都是值，是没有函数可以调用的，比如 <code>undefined.toString()</code></p>
                      <p></p>
                      <figure><img class="lazyload inited loaded"
                          data-src="https://user-gold-cdn.xitu.io/2018/11/14/16711c4f991c73ac?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"
                          data-width="526" data-height="53" src="./2-JS 基础知识点及常考面试题（一）_files/16711c4f991c73ac">
                        <figcaption></figcaption>
                      </figure>
                      <p></p>
                      <p>此时你肯定会有疑问，这不对呀，明明 <code>'1'.toString()</code> 是可以使用的。其实在这种情况下，<code>'1'</code>
                        已经不是原始类型了，而是被强制转换成了 <code>String</code> 类型也就是对象类型，所以可以调用 <code>toString</code> 函数。</p>
                      <p>除了会在必要的情况下强转类型以外，原始类型还有一些坑。</p>
                      <p>其中 JS 的 <code>number</code> 类型是浮点类型的，在使用中会遇到某些 Bug，比如 <code>0.1 + 0.2 !==
                          0.3</code>，但是这一块的内容会在进阶部分讲到。<code>string</code> 类型是不可变的，无论你在 <code>string</code>
                        类型上调用何种方法，都不会对值有改变。</p>
                      <p>另外对于 <code>null</code> 来说，很多人会认为他是个对象类型，其实这是错误的。虽然 <code>typeof null</code> 会输出
                        <code>object</code>，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32
                        位系统，为了性能考虑使用低位存储变量的类型信息，<code>000</code> 开头代表是对象，然而 <code>null</code> 表示为全零，所以将它错误的判断为
                        <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p>
                      <h2 class="heading" data-id="heading-2">对象（Object）类型</h2>
                      <blockquote class="warning">
                        <p>涉及面试题：对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？
                        </p>
                      </blockquote>
                      <p>在 JS
                        中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。
                      </p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">const</span> a = []
</code></pre>
                      <p>对于常量 <code>a</code> 来说，假设内存地址（指针）为 <code>#001</code>，那么在地址 <code>#001</code> 的位置存放了值
                        <code>[]</code>，常量 <code>a</code> 存放了地址（指针） <code>#001</code>，再看以下代码</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">const</span> a = []
<span class="hljs-keyword">const</span> b = a
b.push(<span class="hljs-number">1</span>)
</code></pre>
                      <p>当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），也就是说当前变量 <code>b</code> 存放的地址（指针）也是
                        <code>#001</code>，当我们进行数据修改的时候，就会修改存放在地址（指针） <code>#001</code> 上的值，也就导致了两个变量的值都发生了改变。</p>
                      <p>接下来我们来看函数参数是对象的情况</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">person</span>) </span>{
  person.age = <span class="hljs-number">26</span>
  person = {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'yyy'</span>,
    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>
  }

  <span class="hljs-keyword">return</span> person
}
<span class="hljs-keyword">const</span> p1 = {
  <span class="hljs-attr">name</span>: <span class="hljs-string">'yck'</span>,
  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>
}
<span class="hljs-keyword">const</span> p2 = test(p1)
<span class="hljs-built_in">console</span>.log(p1) <span class="hljs-comment">// -&gt; ?</span>
<span class="hljs-built_in">console</span>.log(p2) <span class="hljs-comment">// -&gt; ?</span>
</code></pre>
                      <p>对于以上代码，你是否能正确的写出结果呢？接下来让我为你解析一番：</p>
                      <ul>
                        <li>首先，函数传参是传递对象指针的副本</li>
                        <li>到函数内部修改参数的属性这步，我相信大家都知道，当前 <code>p1</code> 的值也被修改了</li>
                        <li>但是当我们重新为 <code>person</code> 分配了一个对象时就出现了分歧，请看下图</li>
                      </ul>
                      <p></p>
                      <figure><img class="lazyload inited loaded"
                          data-src="https://user-gold-cdn.xitu.io/2018/11/14/16712ce155afef8c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"
                          data-width="658" data-height="414" src="./2-JS 基础知识点及常考面试题（一）_files/16712ce155afef8c">
                        <figcaption></figcaption>
                      </figure>
                      <p></p>
                      <p>所以最后 <code>person</code> 拥有了一个新的地址（指针），也就和 <code>p1</code> 没有任何关系了，导致了最终两个变量的值是不相同的。</p>
                      <h2 class="heading" data-id="heading-3">typeof vs instanceof</h2>
                      <blockquote class="warning">
                        <p>涉及面试题：typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？
                        </p>
                      </blockquote>
                      <p><code>typeof</code> 对于原始类型来说，除了 <code>null</code> 都可以显示正确的类型</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span> <span class="hljs-comment">// 'number'</span>
<span class="hljs-keyword">typeof</span> <span class="hljs-string">'1'</span> <span class="hljs-comment">// 'string'</span>
<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">// 'undefined'</span>
<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// 'boolean'</span>
<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>() <span class="hljs-comment">// 'symbol'</span>
</code></pre>
                      <p><code>typeof</code> 对于对象来说，除了函数都会显示 <code>object</code>，所以说 <code>typeof</code>
                        并不能准确判断变量到底是什么类型</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">typeof</span> [] <span class="hljs-comment">// 'object'</span>
<span class="hljs-keyword">typeof</span> {} <span class="hljs-comment">// 'object'</span>
<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">console</span>.log <span class="hljs-comment">// 'function'</span>
</code></pre>
                      <p>如果我们想判断一个对象的正确类型，这时候可以考虑使用 <code>instanceof</code>，因为内部机制是通过原型链来判断的，在后面的章节中我们也会自己去实现一个
                        <code>instanceof</code>。</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">const</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{}
<span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person()
p1 <span class="hljs-keyword">instanceof</span> Person <span class="hljs-comment">// true</span>

<span class="hljs-keyword">var</span> str = <span class="hljs-string">'hello world'</span>
str <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span> <span class="hljs-comment">// false</span>

<span class="hljs-keyword">var</span> str1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">'hello world'</span>)
str1 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span> <span class="hljs-comment">// true</span>
</code></pre>
                      <p>对于原始类型来说，你想直接通过 <code>instanceof</code> 来判断类型是不行的，当然我们还是有办法让 <code>instanceof</code> 判断原始类型的
                      </p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimitiveString</span> </span>{
  <span class="hljs-keyword">static</span> [<span class="hljs-built_in">Symbol</span>.hasInstance](x) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">'string'</span>
  }
}
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'hello world'</span> <span class="hljs-keyword">instanceof</span> PrimitiveString) <span class="hljs-comment">// true</span>
</code></pre>
                      <p>你可能不知道 <code>Symbol.hasInstance</code> 是什么东西，其实就是一个能让我们自定义 <code>instanceof</code>
                        行为的东西，以上代码等同于 <code>typeof 'hello world' === 'string'</code>，所以结果自然是 <code>true</code>
                        了。这其实也侧面反映了一个问题， <code>instanceof</code> 也不是百分之百可信的。</p>
                      <h2 class="heading" data-id="heading-4">类型转换</h2>
                      <blockquote class="warning">
                        <p>涉及面试题：该知识点常在笔试题中见到，熟悉了转换规则就不惧怕此类题目了。
                        </p>
                      </blockquote>
                      <p>首先我们要知道，在 JS 中类型转换只有三种情况，分别是：</p>
                      <ul>
                        <li>转换为布尔值</li>
                        <li>转换为数字</li>
                        <li>转换为字符串</li>
                      </ul>
                      <p>我们先来看一个类型转换表格，然后再进入正题</p>
                      <p></p>
                      <figure><img class="lazyload inited loaded"
                          data-src="https://user-gold-cdn.xitu.io/2018/11/15/16716dec14421e47?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"
                          data-width="910" data-height="648" src="./2-JS 基础知识点及常考面试题（一）_files/16716dec14421e47">
                        <figcaption></figcaption>
                      </figure>
                      <p></p>
                      <h3 class="heading" data-id="heading-5">转Boolean</h3>
                      <p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>，
                        <code>''</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象。</p>
                      <h3 class="heading" data-id="heading-6">对象转原始类型</h3>
                      <p>对象在转换类型的时候，会调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该函数来说，算法逻辑一般来说如下：</p>
                      <ul>
                        <li>如果已经是原始类型了，那就不需要转换了</li>
                        <li>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</li>
                        <li>调用 <code>x.toString()</code>，如果转换为基础类型，就返回转换的值</li>
                        <li>如果都没有返回原始类型，就会报错</li>
                      </ul>
                      <p>当然你也可以重写 <code>Symbol.toPrimitive</code> ，该方法在转原始类型时调用优先级最高。</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">let</span> a = {
  valueOf() {
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>
  },
  toString() {
    <span class="hljs-keyword">return</span> <span class="hljs-string">'1'</span>
  },
  [<span class="hljs-built_in">Symbol</span>.toPrimitive]() {
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>
  }
}
<span class="hljs-number">1</span> + a <span class="hljs-comment">// =&gt; 3</span>
</code></pre>
                      <h3 class="heading" data-id="heading-7">四则运算符</h3>
                      <p>加法运算符不同于其他几个运算符，它有以下几个特点：</p>
                      <ul>
                        <li>运算中其中一方为字符串，那么就会把另一方也转换为字符串</li>
                        <li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</li>
                      </ul>
                      <pre><code class="hljs js" lang="js"><span class="hljs-number">1</span> + <span class="hljs-string">'1'</span> <span class="hljs-comment">// '11'</span>
<span class="hljs-literal">true</span> + <span class="hljs-literal">true</span> <span class="hljs-comment">// 2</span>
<span class="hljs-number">4</span> + [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-comment">// "41,2,3"</span>
</code></pre>
                      <p>如果你对于答案有疑问的话，请看解析：</p>
                      <ul>
                        <li>对于第一行代码来说，触发特点一，所以将数字 <code>1</code> 转换为字符串，得到结果 <code>'11'</code></li>
                        <li>对于第二行代码来说，触发特点二，所以将 <code>true</code> 转为数字 <code>1</code></li>
                        <li>对于第三行代码来说，触发特点二，所以将数组通过 <code>toString</code> 转为字符串 <code>1,2,3</code>，得到结果
                          <code>41,2,3</code></li>
                      </ul>
                      <p>另外对于加法还需要注意这个表达式 <code>'a' + + 'b'</code></p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-string">'a'</span> + + <span class="hljs-string">'b'</span> <span class="hljs-comment">// -&gt; "aNaN"</span>
</code></pre>
                      <p>因为 <code>+ 'b'</code> 等于 <code>NaN</code>，所以结果为 <code>"aNaN"</code>，你可能也会在一些代码中看到过 <code>+
                          '1'</code> 的形式来快速获取 <code>number</code> 类型。</p>
                      <p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-number">4</span> * <span class="hljs-string">'3'</span> <span class="hljs-comment">// 12</span>
<span class="hljs-number">4</span> * [] <span class="hljs-comment">// 0</span>
<span class="hljs-number">4</span> * [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] <span class="hljs-comment">// NaN</span>
</code></pre>
                      <h3 class="heading" data-id="heading-8">比较运算符</h3>
                      <ol>
                        <li>如果是对象，就通过 <code>toPrimitive</code> 转换对象</li>
                        <li>如果是字符串，就通过 <code>unicode</code> 字符索引来比较</li>
                      </ol>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">let</span> a = {
  valueOf() {
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>
  },
  toString() {
    <span class="hljs-keyword">return</span> <span class="hljs-string">'1'</span>
  }
}
a &gt; <span class="hljs-number">-1</span> <span class="hljs-comment">// true</span>
</code></pre>
                      <p>在以上代码中，因为 <code>a</code> 是对象，所以会通过 <code>valueOf</code> 转换为原始类型再比较值。</p>
                      <h2 class="heading" data-id="heading-9">this</h2>
                      <blockquote class="warning">
                        <p>涉及面试题：如何正确判断 this？箭头函数的 this 是什么？
                        </p>
                      </blockquote>
                      <p><code>this</code> 是很多人会混淆的概念，但是其实它一点都不难，只是网上很多文章把简单的东西说复杂了。在这一小节中，你一定会彻底明白 <code>this</code>
                        这个概念的。</p>
                      <p>我们先来看几个函数调用的场景</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.a)
}
<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>
foo()

<span class="hljs-keyword">const</span> obj = {
  <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>,
  <span class="hljs-attr">foo</span>: foo
}
obj.foo()

<span class="hljs-keyword">const</span> c = <span class="hljs-keyword">new</span> foo()
</code></pre>
                      <p>接下来我们一个个分析上面几个场景</p>
                      <ul>
                        <li>对于直接调用 <code>foo</code> 来说，不管 <code>foo</code> 函数被放在了什么地方，<code>this</code> 一定是
                          <code>window</code></li>
                        <li>对于 <code>obj.foo()</code> 来说，我们只需要记住，谁调用了函数，谁就是 <code>this</code>，所以在这个场景下 <code>foo</code>
                          函数中的 <code>this</code> 就是 <code>obj</code> 对象</li>
                        <li>对于 <code>new</code> 的方式来说，<code>this</code> 被永远绑定在了 <code>c</code> 上面，不会被任何方式改变
                          <code>this</code></li>
                      </ul>
                      <p>说完了以上几种情况，其实很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>)
    }
  }
}
<span class="hljs-built_in">console</span>.log(a()()())
</code></pre>
                      <p>首先箭头函数其实是没有 <code>this</code> 的，箭头函数中的 <code>this</code> 只取决包裹箭头函数的第一个普通函数的
                        <code>this</code>。在这个例子中，因为包裹箭头函数的第一个普通函数是 <code>a</code>，所以此时的 <code>this</code> 是
                        <code>window</code>。另外对箭头函数使用 <code>bind</code> 这类函数是无效的。</p>
                      <p>最后种情况也就是 <code>bind</code> 这些改变上下文的 API 了，对于这些函数来说，<code>this</code> 取决于第一个参数，如果第一个参数为空，那么就是
                        <code>window</code>。</p>
                      <p>那么说到 <code>bind</code>，不知道大家是否考虑过，如果对一个函数进行多次 <code>bind</code>，那么上下文会是什么呢？</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">let</span> a = {}
<span class="hljs-keyword">let</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>) }
fn.bind().bind(a)() <span class="hljs-comment">// =&gt; ?</span>
</code></pre>
                      <p>如果你认为输出结果是 <code>a</code>，那么你就错了，其实我们可以把上述代码转换成另一种形式</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-comment">// fn.bind().bind(a) 等于</span>
<span class="hljs-keyword">let</span> fn2 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> fn.apply()
  }.apply(a)
}
fn2()
</code></pre>
                      <p>可以从上述代码中发现，不管我们给函数 <code>bind</code> 几次，<code>fn</code> 中的 <code>this</code> 永远由第一次
                        <code>bind</code> 决定，所以结果永远是 <code>window</code>。</p>
                      <pre><code class="hljs js" lang="js"><span class="hljs-keyword">let</span> a = { <span class="hljs-attr">name</span>: <span class="hljs-string">'yck'</span> }
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name)
}
foo.bind(a)() <span class="hljs-comment">// =&gt; 'yck'</span>
</code></pre>
                      <p>以上就是 <code>this</code> 的规则了，但是可能会发生多个规则同时出现的情况，这时候不同的规则之间会根据优先级最高的来决定 <code>this</code> 最终指向哪里。
                      </p>
                      <p>首先，<code>new</code> 的方式优先级最高，接下来是 <code>bind</code> 这些函数，然后是 <code>obj.foo()</code> 这种调用方式，最后是
                        <code>foo</code> 这种调用方式，同时，箭头函数的 <code>this</code> 一旦被绑定，就不会再被任何方式所改变。</p>
                      <p>如果你还是觉得有点绕，那么就看以下的这张流程图吧，图中的流程只针对于单个规则。</p>
                      <p></p>
                      <figure><img class="lazyload inited loaded"
                          data-src="https://user-gold-cdn.xitu.io/2018/11/15/16717eaf3383aae8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"
                          data-width="744" data-height="531" src="./2-JS 基础知识点及常考面试题（一）_files/16717eaf3383aae8">
                        <figcaption></figcaption>
                      </figure>
                      <p></p>
                      <h2 class="heading" data-id="heading-10">小结</h2>
                      <p>以上就是我们 JS 基础知识点的第一部分内容了。这一小节中涉及到的知识点在我们日常的开发中经常可以看到，并且很多容易出现的坑
                        也出自于这些知识点，相信认真读完的你一定会在日后的开发中少踩很多坑。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>
                    </div>
                    <section data-v-05bbf43a="" class="book-comments">
                      <div data-v-05bbf43a="" class="box-title">留言</div>
                      <div data-v-05bbf43a="" class="comment-box">
                        <div data-v-81313b1e="" data-v-05bbf43a="" class="comment-form comment-form" id="comment">
                          <div data-v-3b1ba6d2="" data-v-afcc6e34="" data-v-81313b1e=""
                            data-src="https://b-gold-cdn.xitu.io/v3/static/img/default-avatar.e30559a.svg"
                            class="lazy avatar avatar loaded"
                            style="background-image: url(&quot;https://b-gold-cdn.xitu.io/v3/static/img/default-avatar.e30559a.svg&quot;);">
                          </div><textarea data-v-81313b1e="" placeholder="评论将在后台进行审核，审核通过后对所有人可见" class="content-input"
                            style="overflow: hidden; overflow-wrap: break-word; height: 60px;"></textarea>
                          <div data-v-81313b1e="" class="action-box" style="display: none;">
                            <div data-v-680eb36d="" data-v-81313b1e="" class="image-uploader image-uploader"
                              style="display: none;"><input data-v-680eb36d="" type="file" class="input"><button
                                data-v-680eb36d="" class="upload-btn"><i data-v-680eb36d=""
                                  class="icon ion-image"></i><span data-v-680eb36d="">上传图片</span></button></div>
                            <div data-v-81313b1e="" class="submit-box"><span data-v-81313b1e="" class="submit-text">Ctrl
                                or ⌘ + Enter</span><button data-v-81313b1e="" class="submit-btn">评论</button></div>
                          </div>
                          <!---->
                        </div>
                      </div>
                      <ul data-v-32e5a55b="" data-v-05bbf43a="" st:block="commentList"
                        class="comment-list comment-list">
                        <!---->
                      </ul>
                    </section>
                  </div>
                </div>
                <!---->
                <!---->
              </div>
            </div>
            <div data-v-a9263a68="" data-v-097468bb="" class="book-handle book-direction">
              <div data-v-a9263a68="" class="step-btn step-btn--prev"><img data-v-a9263a68=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/prev.87ad47e.svg"></div>
              <div data-v-a9263a68="" class="step-btn step-btn--next"><img data-v-a9263a68=""
                  src="./2-JS 基础知识点及常考面试题（一）_files/next.54d8a35.svg"></div>
              <!---->
              <!---->
            </div>
            <!---->
          </div>
        </div>
      </section>
      <!---->
      <!---->
      <!---->
      <div data-v-1b0b9cb8="" data-v-097468bb="" class="image-viewer-box">
        <!---->
      </div>
    </div>
    <!---->
  </div>


  <script type="text/javascript" src="./2-JS 基础知识点及常考面试题（一）_files/runtime.5902a8b1cc2b7567f479.js.下载"></script>
  <script type="text/javascript" src="./2-JS 基础知识点及常考面试题（一）_files/0.e205fcdd4d4b6767f462.js.下载"></script>
  <script type="text/javascript" src="./2-JS 基础知识点及常考面试题（一）_files/1.cbb1f8f5dcdee0086c6a.js.下载"></script>
</body>

</html>
